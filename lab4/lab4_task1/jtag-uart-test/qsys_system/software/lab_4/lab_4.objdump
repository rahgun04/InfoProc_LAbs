
lab_4.elf:     file format elf32-littlenios2
lab_4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800020

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000012cc memsz 0x000012cc flags r-x
    LOAD off    0x000022ec vaddr 0x008012ec paddr 0x00801448 align 2**12
         filesz 0x0000015c memsz 0x0000015c flags rw-
    LOAD off    0x000025a4 vaddr 0x008015a4 paddr 0x008015a4 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00800020  00800020  00002448  2**0
                  CONTENTS
  2 .text         00001294  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  008012b4  008012b4  000022b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000015c  008012ec  00801448  000022ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  008015a4  008015a4  000025a4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008015bc  008015bc  00002448  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000420  00000000  00000000  00002470  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000067f4  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002285  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000025b8  00000000  00000000  0000b309  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005dc  00000000  00000000  0000d8c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015d9  00000000  00000000  0000dea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001eba  00000000  00000000  0000f479  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00011334  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00011368  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00012b55  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00012b58  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012b5b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012b5c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00012b5d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00012b61  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00012b65  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00012b69  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00012b72  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00012b7b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00012b84  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004f  00000000  00000000  00012b87  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000350ce  00000000  00000000  00012bd6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800020 l    d  .text	00000000 .text
008012b4 l    d  .rodata	00000000 .rodata
008012ec l    d  .rwdata	00000000 .rwdata
008015a4 l    d  .bss	00000000 .bss
008015bc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab_4_bsp//obj/HAL/src/crt0.o
00800068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_str_mbf.c
00000000 l    df *ABS*	00000000 impure.c
008012ec l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
008007d0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080142c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00801260 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00800dac g     F .text	0000001c _malloc_usable_size_r
008010e4 g     F .text	0000002c alt_main
00801448 g       *ABS*	00000000 __flash_rwdata_start
008015bc g       *ABS*	00000000 __alt_heap_start
00800420 g     F .text	00000060 memmove
0080017c g     F .text	00000058 read_chars
00801110 g     F .text	00000038 alt_putstr
00801430 g     O .rwdata	00000004 jtag_uart
00801274 g     F .text	00000008 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008015ac g     O .bss	00000004 errno
008015b4 g     O .bss	00000004 alt_argv
00809424 g       *ABS*	00000000 _gp
008000c8 g     F .text	000000b4 generate_text
008013cc g     O .rwdata	00000030 alt_fd_list
00800d84 g     F .text	00000028 memcpy
008011b8 g     F .text	0000005c altera_avalon_jtag_uart_read
008003f8 g     F .text	00000014 malloc
00800edc g     F .text	00000064 .hidden __udivsi3
0080127c g     F .text	00000038 alt_icache_flush
00800780 g     F .text	00000050 _sbrk_r
00801434 g     O .rwdata	00000004 alt_max_fd
00801424 g     O .rwdata	00000004 _global_impure_ptr
008006dc g     F .text	000000a4 _realloc_r
008015bc g       *ABS*	00000000 __bss_end
00800fc0 g     F .text	00000044 alt_getchar
008013fc g     O .rwdata	00000028 alt_dev_null
00801248 g     F .text	00000018 alt_dcache_flush_all
0080006c g     F .text	0000005c print_text
00801448 g       *ABS*	00000000 __ram_rwdata_end
00801438 g     O .rwdata	00000008 alt_dev_list
008012ec g       *ABS*	00000000 __ram_rodata_end
008002e4 g     F .text	00000114 __sfvwrite_small_str_mbf
00800f40 g     F .text	00000058 .hidden __umodsi3
008015bc g       *ABS*	00000000 end
01000000 g       *ABS*	00000000 __alt_stack_pointer
00801214 g     F .text	00000034 altera_avalon_jtag_uart_write
008001d8 g     F .text	0000007c _asprintf_r
008004a0 g     F .text	000000e4 _free_r
00800020 g     F .text	0000004c _start
008011b4 g     F .text	00000004 alt_sys_init
00800f98 g     F .text	00000028 .hidden __mulsi3
008012ec g       *ABS*	00000000 __ram_rwdata_start
008012b4 g       *ABS*	00000000 __ram_rodata_start
008015bc g       *ABS*	00000000 __alt_stack_base
00801148 g     F .text	0000004c sbrk
0080083c g     F .text	0000052c ___svfprintf_internal_r
008015a4 g       *ABS*	00000000 __bss_start
00800480 g     F .text	00000020 memset
008001d4 g     F .text	00000004 main
008015b0 g     O .bss	00000004 alt_envp
01000000 g       *ABS*	00000000 __alt_heap_limit
00800584 g     F .text	00000158 _malloc_r
00800de4 g     F .text	00000084 .hidden __divsi3
008012b4 g       *ABS*	00000000 __flash_rodata_start
00801194 g     F .text	00000020 alt_irq_init
00800254 g     F .text	00000090 asprintf
00801428 g     O .rwdata	00000004 _impure_ptr
008015b8 g     O .bss	00000004 alt_argc
00801440 g     O .rwdata	00000008 alt_fs_list
00800d68 g     F .text	0000001c __vfprintf_internal_unused
00800020 g       *ABS*	00000000 __ram_exceptions_start
00801448 g       *ABS*	00000000 _edata
008015bc g       *ABS*	00000000 _end
00800020 g       *ABS*	00000000 __ram_exceptions_end
00800e68 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080001c g       .entry	00000000 _exit
00800dc8 g     F .text	0000001c strlen
008015a4 g     O .bss	00000004 __malloc_sbrk_start
00801268 g     F .text	0000000c alt_icache_flush_all
008015a8 g     O .bss	00000004 __malloc_free_list
00801004 g     F .text	000000e0 alt_load
0080040c g     F .text	00000014 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08400814 	ori	at,at,32
    jmp r1
  800018:	0800683a 	jmp	at

0080001c <_exit>:
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .text:

00800020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  80002c:	00bffd16 	blt	zero,r2,800024 <__alt_data_end+0xff800024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800030:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800038:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80003c:	d6a50914 	ori	gp,gp,37924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800040:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800044:	10856914 	ori	r2,r2,5540

    movhi r3, %hi(__bss_end)
  800048:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80004c:	18c56f14 	ori	r3,r3,5564

    beq r2, r3, 1f
  800050:	10c00326 	beq	r2,r3,800060 <_start+0x40>

0:
    stw zero, (r2)
  800054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80005c:	10fffd36 	bltu	r2,r3,800054 <__alt_data_end+0xff800054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800060:	08010040 	call	801004 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800064:	08010e40 	call	8010e4 <alt_main>

00800068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800068:	003fff06 	br	800068 <__alt_data_end+0xff800068>

0080006c <print_text>:
#include <string.h>
#define CHARLIM 256    // Maximum character length of what the user places in memory.  Increase to allow longer sequences
#define QUITLETTER '~' // Letter to kill all processing

void print_text(char *text, const int length)
{
  80006c:	defffc04 	addi	sp,sp,-16
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
  800070:	280d883a 	mov	r6,r5
  800074:	00800104 	movi	r2,4
  800078:	01402034 	movhi	r5,128
  80007c:	200f883a 	mov	r7,r4
  800080:	2944ad04 	addi	r5,r5,4788
#include <string.h>
#define CHARLIM 256    // Maximum character length of what the user places in memory.  Increase to allow longer sequences
#define QUITLETTER '~' // Letter to kill all processing

void print_text(char *text, const int length)
{
  800084:	dc000215 	stw	r16,8(sp)
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
  800088:	d8800015 	stw	r2,0(sp)
#include <string.h>
#define CHARLIM 256    // Maximum character length of what the user places in memory.  Increase to allow longer sequences
#define QUITLETTER '~' // Letter to kill all processing

void print_text(char *text, const int length)
{
  80008c:	2021883a 	mov	r16,r4
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
  800090:	d889883a 	add	r4,sp,r2
#include <string.h>
#define CHARLIM 256    // Maximum character length of what the user places in memory.  Increase to allow longer sequences
#define QUITLETTER '~' // Letter to kill all processing

void print_text(char *text, const int length)
{
  800094:	dfc00315 	stw	ra,12(sp)
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
  800098:	08002540 	call	800254 <asprintf>
    alt_putstr(printMsg);
  80009c:	d9000117 	ldw	r4,4(sp)
  8000a0:	08011100 	call	801110 <alt_putstr>
    free(printMsg);
  8000a4:	d9000117 	ldw	r4,4(sp)
  8000a8:	080040c0 	call	80040c <free>
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
  8000ac:	01808004 	movi	r6,512
  8000b0:	000b883a 	mov	r5,zero
  8000b4:	8009883a 	mov	r4,r16
}
  8000b8:	dfc00317 	ldw	ra,12(sp)
  8000bc:	dc000217 	ldw	r16,8(sp)
  8000c0:	dec00404 	addi	sp,sp,16
{
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
    alt_putstr(printMsg);
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
  8000c4:	08004801 	jmpi	800480 <memset>

008000c8 <generate_text>:
}

char generate_text(char curr, int *length, char *text, int *running)
{
  8000c8:	2005883a 	mov	r2,r4
    if (curr == '\n')
  8000cc:	21003fcc 	andi	r4,r4,255
  8000d0:	2100201c 	xori	r4,r4,128
  8000d4:	213fe004 	addi	r4,r4,-128
  8000d8:	00c00284 	movi	r3,10
  8000dc:	20c02626 	beq	r4,r3,800178 <generate_text+0xb0>
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
}

char generate_text(char curr, int *length, char *text, int *running)
{
  8000e0:	defff804 	addi	sp,sp,-32
  8000e4:	dd800615 	stw	r22,24(sp)
  8000e8:	dd400515 	stw	r21,20(sp)
  8000ec:	dd000415 	stw	r20,16(sp)
  8000f0:	dcc00315 	stw	r19,12(sp)
  8000f4:	dc800215 	stw	r18,8(sp)
  8000f8:	dc400115 	stw	r17,4(sp)
  8000fc:	dc000015 	stw	r16,0(sp)
  800100:	dfc00715 	stw	ra,28(sp)
  800104:	3829883a 	mov	r20,r7
  800108:	3025883a 	mov	r18,r6
  80010c:	2827883a 	mov	r19,r5
    if (curr == '\n')
  800110:	3023883a 	mov	r17,r6
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
  800114:	057fffc4 	movi	r21,-1
  800118:	1821883a 	mov	r16,r3
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
  80011c:	05801f84 	movi	r22,126
    if (curr == '\n')
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
  800120:	10c03fcc 	andi	r3,r2,255
  800124:	18c0201c 	xori	r3,r3,128
  800128:	18ffe004 	addi	r3,r3,-128
  80012c:	8c89c83a 	sub	r4,r17,r18
  800130:	1d400726 	beq	r3,r21,800150 <generate_text+0x88>
  800134:	1c000626 	beq	r3,r16,800150 <generate_text+0x88>
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
  800138:	1d80011e 	bne	r3,r22,800140 <generate_text+0x78>
        {
            *running = 0;
  80013c:	a0000015 	stw	zero,0(r20)
        }                        // If quitting letter is encountered, setting running to 0
        text[idx] = newCurr;     // Add the next letter to the text buffer
  800140:	88800005 	stb	r2,0(r17)
        idx++;                   // Keep track of the number of characters read
        newCurr = alt_getchar(); // Get the next character
  800144:	0800fc00 	call	800fc0 <alt_getchar>
  800148:	8c400044 	addi	r17,r17,1
  80014c:	003ff406 	br	800120 <__alt_data_end+0xff800120>
    }
    *length = idx;
  800150:	99000015 	stw	r4,0(r19)

    return newCurr;
}
  800154:	dfc00717 	ldw	ra,28(sp)
  800158:	dd800617 	ldw	r22,24(sp)
  80015c:	dd400517 	ldw	r21,20(sp)
  800160:	dd000417 	ldw	r20,16(sp)
  800164:	dcc00317 	ldw	r19,12(sp)
  800168:	dc800217 	ldw	r18,8(sp)
  80016c:	dc400117 	ldw	r17,4(sp)
  800170:	dc000017 	ldw	r16,0(sp)
  800174:	dec00804 	addi	sp,sp,32
  800178:	f800283a 	ret

0080017c <read_chars>:

int read_chars()
{
  80017c:	deff7d04 	addi	sp,sp,-524
    char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
    int running = 1;
  800180:	00800044 	movi	r2,1

    return newCurr;
}

int read_chars()
{
  800184:	dfc08215 	stw	ra,520(sp)
    char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
  800188:	d8008115 	stw	zero,516(sp)
    int running = 1;
  80018c:	d8808015 	stw	r2,512(sp)

    while (running)
  800190:	d8808017 	ldw	r2,512(sp)
  800194:	10000c26 	beq	r2,zero,8001c8 <read_chars+0x4c>
    {                                                                    // Keep running until QUITLETTER is encountered
        prevLetter = alt_getchar();                                      // Extract the first character (and create a hold until one arrives)
  800198:	0800fc00 	call	800fc0 <alt_getchar>
        prevLetter = generate_text(prevLetter, &length, text, &running); // Process input text
  80019c:	11003fcc 	andi	r4,r2,255
  8001a0:	2100201c 	xori	r4,r4,128
  8001a4:	d9408104 	addi	r5,sp,516
  8001a8:	d9c08004 	addi	r7,sp,512
  8001ac:	d80d883a 	mov	r6,sp
  8001b0:	213fe004 	addi	r4,r4,-128
  8001b4:	08000c80 	call	8000c8 <generate_text>
        print_text(text, length);                                        // Print input text
  8001b8:	d9408117 	ldw	r5,516(sp)
  8001bc:	d809883a 	mov	r4,sp
  8001c0:	080006c0 	call	80006c <print_text>
  8001c4:	003ff206 	br	800190 <__alt_data_end+0xff800190>
    }

    return 0;
}
  8001c8:	dfc08217 	ldw	ra,520(sp)
  8001cc:	dec08304 	addi	sp,sp,524
  8001d0:	f800283a 	ret

008001d4 <main>:

int main()
{
    return read_chars();
  8001d4:	080017c1 	jmpi	80017c <read_chars>

008001d8 <_asprintf_r>:
  8001d8:	defff604 	addi	sp,sp,-40
  8001dc:	dc000715 	stw	r16,28(sp)
  8001e0:	2821883a 	mov	r16,r5
  8001e4:	dfc00815 	stw	ra,32(sp)
  8001e8:	d9c00915 	stw	r7,36(sp)
  8001ec:	0080a204 	movi	r2,648
  8001f0:	d880000d 	sth	r2,0(sp)
  8001f4:	00bfffc4 	movi	r2,-1
  8001f8:	d880008d 	sth	r2,2(sp)
  8001fc:	00802034 	movhi	r2,128
  800200:	1080b904 	addi	r2,r2,740
  800204:	d8800115 	stw	r2,4(sp)
  800208:	00802034 	movhi	r2,128
  80020c:	1081b704 	addi	r2,r2,1756
  800210:	d9c00904 	addi	r7,sp,36
  800214:	d80b883a 	mov	r5,sp
  800218:	d8000415 	stw	zero,16(sp)
  80021c:	d8000215 	stw	zero,8(sp)
  800220:	d8000515 	stw	zero,20(sp)
  800224:	d8000315 	stw	zero,12(sp)
  800228:	d8800615 	stw	r2,24(sp)
  80022c:	080083c0 	call	80083c <___svfprintf_internal_r>
  800230:	10000416 	blt	r2,zero,800244 <_asprintf_r+0x6c>
  800234:	d8c00417 	ldw	r3,16(sp)
  800238:	18000005 	stb	zero,0(r3)
  80023c:	d8c00217 	ldw	r3,8(sp)
  800240:	80c00015 	stw	r3,0(r16)
  800244:	dfc00817 	ldw	ra,32(sp)
  800248:	dc000717 	ldw	r16,28(sp)
  80024c:	dec00a04 	addi	sp,sp,40
  800250:	f800283a 	ret

00800254 <asprintf>:
  800254:	defff504 	addi	sp,sp,-44
  800258:	dc000715 	stw	r16,28(sp)
  80025c:	2021883a 	mov	r16,r4
  800260:	dfc00815 	stw	ra,32(sp)
  800264:	d9800915 	stw	r6,36(sp)
  800268:	d9c00a15 	stw	r7,40(sp)
  80026c:	0080a204 	movi	r2,648
  800270:	d880000d 	sth	r2,0(sp)
  800274:	00bfffc4 	movi	r2,-1
  800278:	d880008d 	sth	r2,2(sp)
  80027c:	00802034 	movhi	r2,128
  800280:	1080b904 	addi	r2,r2,740
  800284:	d8800115 	stw	r2,4(sp)
  800288:	00802034 	movhi	r2,128
  80028c:	1081b704 	addi	r2,r2,1756
  800290:	d8800615 	stw	r2,24(sp)
  800294:	00802034 	movhi	r2,128
  800298:	10850a04 	addi	r2,r2,5160
  80029c:	11000017 	ldw	r4,0(r2)
  8002a0:	280d883a 	mov	r6,r5
  8002a4:	d9c00904 	addi	r7,sp,36
  8002a8:	d80b883a 	mov	r5,sp
  8002ac:	d8000415 	stw	zero,16(sp)
  8002b0:	d8000215 	stw	zero,8(sp)
  8002b4:	d8000515 	stw	zero,20(sp)
  8002b8:	d8000315 	stw	zero,12(sp)
  8002bc:	080083c0 	call	80083c <___svfprintf_internal_r>
  8002c0:	10000416 	blt	r2,zero,8002d4 <asprintf+0x80>
  8002c4:	d8c00417 	ldw	r3,16(sp)
  8002c8:	18000005 	stb	zero,0(r3)
  8002cc:	d8c00217 	ldw	r3,8(sp)
  8002d0:	80c00015 	stw	r3,0(r16)
  8002d4:	dfc00817 	ldw	ra,32(sp)
  8002d8:	dc000717 	ldw	r16,28(sp)
  8002dc:	dec00b04 	addi	sp,sp,44
  8002e0:	f800283a 	ret

008002e4 <__sfvwrite_small_str_mbf>:
  8002e4:	2880000b 	ldhu	r2,0(r5)
  8002e8:	10c0020c 	andi	r3,r2,8
  8002ec:	18003826 	beq	r3,zero,8003d0 <__sfvwrite_small_str_mbf+0xec>
  8002f0:	28c0008f 	ldh	r3,2(r5)
  8002f4:	defffa04 	addi	sp,sp,-24
  8002f8:	dc000015 	stw	r16,0(sp)
  8002fc:	dfc00515 	stw	ra,20(sp)
  800300:	dd000415 	stw	r20,16(sp)
  800304:	dcc00315 	stw	r19,12(sp)
  800308:	dc800215 	stw	r18,8(sp)
  80030c:	dc400115 	stw	r17,4(sp)
  800310:	2821883a 	mov	r16,r5
  800314:	1800290e 	bge	r3,zero,8003bc <__sfvwrite_small_str_mbf+0xd8>
  800318:	10c0800c 	andi	r3,r2,512
  80031c:	18002726 	beq	r3,zero,8003bc <__sfvwrite_small_str_mbf+0xd8>
  800320:	28c00517 	ldw	r3,20(r5)
  800324:	3029883a 	mov	r20,r6
  800328:	3823883a 	mov	r17,r7
  80032c:	19c0150e 	bge	r3,r7,800384 <__sfvwrite_small_str_mbf+0xa0>
  800330:	1080200c 	andi	r2,r2,128
  800334:	10001426 	beq	r2,zero,800388 <__sfvwrite_small_str_mbf+0xa4>
  800338:	29400217 	ldw	r5,8(r5)
  80033c:	84800417 	ldw	r18,16(r16)
  800340:	80800617 	ldw	r2,24(r16)
  800344:	9165c83a 	sub	r18,r18,r5
  800348:	10001c26 	beq	r2,zero,8003bc <__sfvwrite_small_str_mbf+0xd8>
  80034c:	00c02034 	movhi	r3,128
  800350:	18c50a04 	addi	r3,r3,5160
  800354:	19000017 	ldw	r4,0(r3)
  800358:	3ca7883a 	add	r19,r7,r18
  80035c:	980d883a 	mov	r6,r19
  800360:	103ee83a 	callr	r2
  800364:	10001526 	beq	r2,zero,8003bc <__sfvwrite_small_str_mbf+0xd8>
  800368:	14a5883a 	add	r18,r2,r18
  80036c:	80800215 	stw	r2,8(r16)
  800370:	84800415 	stw	r18,16(r16)
  800374:	84c00315 	stw	r19,12(r16)
  800378:	84400515 	stw	r17,20(r16)
  80037c:	8807883a 	mov	r3,r17
  800380:	00000106 	br	800388 <__sfvwrite_small_str_mbf+0xa4>
  800384:	38c00116 	blt	r7,r3,80038c <__sfvwrite_small_str_mbf+0xa8>
  800388:	1823883a 	mov	r17,r3
  80038c:	81000417 	ldw	r4,16(r16)
  800390:	880d883a 	mov	r6,r17
  800394:	a00b883a 	mov	r5,r20
  800398:	08004200 	call	800420 <memmove>
  80039c:	80800517 	ldw	r2,20(r16)
  8003a0:	81c00417 	ldw	r7,16(r16)
  8003a4:	1445c83a 	sub	r2,r2,r17
  8003a8:	3c63883a 	add	r17,r7,r17
  8003ac:	80800515 	stw	r2,20(r16)
  8003b0:	84400415 	stw	r17,16(r16)
  8003b4:	0005883a 	mov	r2,zero
  8003b8:	00000706 	br	8003d8 <__sfvwrite_small_str_mbf+0xf4>
  8003bc:	8080000b 	ldhu	r2,0(r16)
  8003c0:	10801014 	ori	r2,r2,64
  8003c4:	8080000d 	sth	r2,0(r16)
  8003c8:	00bfffc4 	movi	r2,-1
  8003cc:	00000206 	br	8003d8 <__sfvwrite_small_str_mbf+0xf4>
  8003d0:	00bfffc4 	movi	r2,-1
  8003d4:	f800283a 	ret
  8003d8:	dfc00517 	ldw	ra,20(sp)
  8003dc:	dd000417 	ldw	r20,16(sp)
  8003e0:	dcc00317 	ldw	r19,12(sp)
  8003e4:	dc800217 	ldw	r18,8(sp)
  8003e8:	dc400117 	ldw	r17,4(sp)
  8003ec:	dc000017 	ldw	r16,0(sp)
  8003f0:	dec00604 	addi	sp,sp,24
  8003f4:	f800283a 	ret

008003f8 <malloc>:
  8003f8:	00802034 	movhi	r2,128
  8003fc:	10850a04 	addi	r2,r2,5160
  800400:	200b883a 	mov	r5,r4
  800404:	11000017 	ldw	r4,0(r2)
  800408:	08005841 	jmpi	800584 <_malloc_r>

0080040c <free>:
  80040c:	00802034 	movhi	r2,128
  800410:	10850a04 	addi	r2,r2,5160
  800414:	200b883a 	mov	r5,r4
  800418:	11000017 	ldw	r4,0(r2)
  80041c:	08004a01 	jmpi	8004a0 <_free_r>

00800420 <memmove>:
  800420:	2005883a 	mov	r2,r4
  800424:	218f883a 	add	r7,r4,r6
  800428:	29000236 	bltu	r5,r4,800434 <memmove+0x14>
  80042c:	1007883a 	mov	r3,r2
  800430:	00000c06 	br	800464 <memmove+0x44>
  800434:	2987883a 	add	r3,r5,r6
  800438:	20fffc2e 	bgeu	r4,r3,80042c <__alt_data_end+0xff80042c>
  80043c:	380b883a 	mov	r5,r7
  800440:	30cdc83a 	sub	r6,r6,r3
  800444:	1989883a 	add	r4,r3,r6
  800448:	20000526 	beq	r4,zero,800460 <memmove+0x40>
  80044c:	18ffffc4 	addi	r3,r3,-1
  800450:	19000003 	ldbu	r4,0(r3)
  800454:	297fffc4 	addi	r5,r5,-1
  800458:	29000005 	stb	r4,0(r5)
  80045c:	003ff906 	br	800444 <__alt_data_end+0xff800444>
  800460:	f800283a 	ret
  800464:	19c00526 	beq	r3,r7,80047c <memmove+0x5c>
  800468:	29000003 	ldbu	r4,0(r5)
  80046c:	18c00044 	addi	r3,r3,1
  800470:	29400044 	addi	r5,r5,1
  800474:	193fffc5 	stb	r4,-1(r3)
  800478:	003ffa06 	br	800464 <__alt_data_end+0xff800464>
  80047c:	f800283a 	ret

00800480 <memset>:
  800480:	2005883a 	mov	r2,r4
  800484:	2007883a 	mov	r3,r4
  800488:	218d883a 	add	r6,r4,r6
  80048c:	19800326 	beq	r3,r6,80049c <memset+0x1c>
  800490:	19400005 	stb	r5,0(r3)
  800494:	18c00044 	addi	r3,r3,1
  800498:	003ffc06 	br	80048c <__alt_data_end+0xff80048c>
  80049c:	f800283a 	ret

008004a0 <_free_r>:
  8004a0:	28003726 	beq	r5,zero,800580 <_free_r+0xe0>
  8004a4:	28ffff17 	ldw	r3,-4(r5)
  8004a8:	28bfff04 	addi	r2,r5,-4
  8004ac:	1800010e 	bge	r3,zero,8004b4 <_free_r+0x14>
  8004b0:	10c5883a 	add	r2,r2,r3
  8004b4:	01402034 	movhi	r5,128
  8004b8:	29456a04 	addi	r5,r5,5544
  8004bc:	28c00017 	ldw	r3,0(r5)
  8004c0:	280d883a 	mov	r6,r5
  8004c4:	1800031e 	bne	r3,zero,8004d4 <_free_r+0x34>
  8004c8:	10000115 	stw	zero,4(r2)
  8004cc:	28800015 	stw	r2,0(r5)
  8004d0:	f800283a 	ret
  8004d4:	10c00c2e 	bgeu	r2,r3,800508 <_free_r+0x68>
  8004d8:	11000017 	ldw	r4,0(r2)
  8004dc:	110b883a 	add	r5,r2,r4
  8004e0:	1940041e 	bne	r3,r5,8004f4 <_free_r+0x54>
  8004e4:	19400017 	ldw	r5,0(r3)
  8004e8:	18c00117 	ldw	r3,4(r3)
  8004ec:	2909883a 	add	r4,r5,r4
  8004f0:	11000015 	stw	r4,0(r2)
  8004f4:	10c00115 	stw	r3,4(r2)
  8004f8:	30800015 	stw	r2,0(r6)
  8004fc:	f800283a 	ret
  800500:	11400336 	bltu	r2,r5,800510 <_free_r+0x70>
  800504:	2807883a 	mov	r3,r5
  800508:	19400117 	ldw	r5,4(r3)
  80050c:	283ffc1e 	bne	r5,zero,800500 <__alt_data_end+0xff800500>
  800510:	19c00017 	ldw	r7,0(r3)
  800514:	19cd883a 	add	r6,r3,r7
  800518:	30800a1e 	bne	r6,r2,800544 <_free_r+0xa4>
  80051c:	10800017 	ldw	r2,0(r2)
  800520:	3885883a 	add	r2,r7,r2
  800524:	18800015 	stw	r2,0(r3)
  800528:	1889883a 	add	r4,r3,r2
  80052c:	2900141e 	bne	r5,r4,800580 <_free_r+0xe0>
  800530:	29000017 	ldw	r4,0(r5)
  800534:	2085883a 	add	r2,r4,r2
  800538:	18800015 	stw	r2,0(r3)
  80053c:	28800117 	ldw	r2,4(r5)
  800540:	00000e06 	br	80057c <_free_r+0xdc>
  800544:	1180032e 	bgeu	r2,r6,800554 <_free_r+0xb4>
  800548:	00800304 	movi	r2,12
  80054c:	20800015 	stw	r2,0(r4)
  800550:	f800283a 	ret
  800554:	11000017 	ldw	r4,0(r2)
  800558:	110d883a 	add	r6,r2,r4
  80055c:	2980061e 	bne	r5,r6,800578 <_free_r+0xd8>
  800560:	29800017 	ldw	r6,0(r5)
  800564:	3109883a 	add	r4,r6,r4
  800568:	11000015 	stw	r4,0(r2)
  80056c:	29000117 	ldw	r4,4(r5)
  800570:	11000115 	stw	r4,4(r2)
  800574:	00000106 	br	80057c <_free_r+0xdc>
  800578:	11400115 	stw	r5,4(r2)
  80057c:	18800115 	stw	r2,4(r3)
  800580:	f800283a 	ret

00800584 <_malloc_r>:
  800584:	defffb04 	addi	sp,sp,-20
  800588:	00bfff04 	movi	r2,-4
  80058c:	dc400115 	stw	r17,4(sp)
  800590:	2c4000c4 	addi	r17,r5,3
  800594:	88a2703a 	and	r17,r17,r2
  800598:	dc800215 	stw	r18,8(sp)
  80059c:	dfc00415 	stw	ra,16(sp)
  8005a0:	dcc00315 	stw	r19,12(sp)
  8005a4:	dc000015 	stw	r16,0(sp)
  8005a8:	8c400204 	addi	r17,r17,8
  8005ac:	00800304 	movi	r2,12
  8005b0:	2025883a 	mov	r18,r4
  8005b4:	8880022e 	bgeu	r17,r2,8005c0 <_malloc_r+0x3c>
  8005b8:	1023883a 	mov	r17,r2
  8005bc:	00000506 	br	8005d4 <_malloc_r+0x50>
  8005c0:	8800040e 	bge	r17,zero,8005d4 <_malloc_r+0x50>
  8005c4:	00800304 	movi	r2,12
  8005c8:	90800015 	stw	r2,0(r18)
  8005cc:	0005883a 	mov	r2,zero
  8005d0:	00003b06 	br	8006c0 <_malloc_r+0x13c>
  8005d4:	897ffb36 	bltu	r17,r5,8005c4 <__alt_data_end+0xff8005c4>
  8005d8:	00802034 	movhi	r2,128
  8005dc:	10856a04 	addi	r2,r2,5544
  8005e0:	10c00017 	ldw	r3,0(r2)
  8005e4:	1009883a 	mov	r4,r2
  8005e8:	1821883a 	mov	r16,r3
  8005ec:	80000926 	beq	r16,zero,800614 <_malloc_r+0x90>
  8005f0:	80800017 	ldw	r2,0(r16)
  8005f4:	1445c83a 	sub	r2,r2,r17
  8005f8:	10001516 	blt	r2,zero,800650 <_malloc_r+0xcc>
  8005fc:	014002c4 	movi	r5,11
  800600:	28800d2e 	bgeu	r5,r2,800638 <_malloc_r+0xb4>
  800604:	80800015 	stw	r2,0(r16)
  800608:	80a1883a 	add	r16,r16,r2
  80060c:	84400015 	stw	r17,0(r16)
  800610:	8000221e 	bne	r16,zero,80069c <_malloc_r+0x118>
  800614:	04002034 	movhi	r16,128
  800618:	84056904 	addi	r16,r16,5540
  80061c:	80800017 	ldw	r2,0(r16)
  800620:	10000e1e 	bne	r2,zero,80065c <_malloc_r+0xd8>
  800624:	000b883a 	mov	r5,zero
  800628:	9009883a 	mov	r4,r18
  80062c:	08007800 	call	800780 <_sbrk_r>
  800630:	80800015 	stw	r2,0(r16)
  800634:	00000906 	br	80065c <_malloc_r+0xd8>
  800638:	80800117 	ldw	r2,4(r16)
  80063c:	1c00021e 	bne	r3,r16,800648 <_malloc_r+0xc4>
  800640:	20800015 	stw	r2,0(r4)
  800644:	00001506 	br	80069c <_malloc_r+0x118>
  800648:	18800115 	stw	r2,4(r3)
  80064c:	00001306 	br	80069c <_malloc_r+0x118>
  800650:	8007883a 	mov	r3,r16
  800654:	84000117 	ldw	r16,4(r16)
  800658:	003fe406 	br	8005ec <__alt_data_end+0xff8005ec>
  80065c:	880b883a 	mov	r5,r17
  800660:	9009883a 	mov	r4,r18
  800664:	08007800 	call	800780 <_sbrk_r>
  800668:	04ffffc4 	movi	r19,-1
  80066c:	14ffd526 	beq	r2,r19,8005c4 <__alt_data_end+0xff8005c4>
  800670:	140000c4 	addi	r16,r2,3
  800674:	00ffff04 	movi	r3,-4
  800678:	80e0703a 	and	r16,r16,r3
  80067c:	1400021e 	bne	r2,r16,800688 <_malloc_r+0x104>
  800680:	84400015 	stw	r17,0(r16)
  800684:	00000506 	br	80069c <_malloc_r+0x118>
  800688:	808bc83a 	sub	r5,r16,r2
  80068c:	9009883a 	mov	r4,r18
  800690:	08007800 	call	800780 <_sbrk_r>
  800694:	14fffa1e 	bne	r2,r19,800680 <__alt_data_end+0xff800680>
  800698:	003fca06 	br	8005c4 <__alt_data_end+0xff8005c4>
  80069c:	810002c4 	addi	r4,r16,11
  8006a0:	00bffe04 	movi	r2,-8
  8006a4:	80c00104 	addi	r3,r16,4
  8006a8:	2084703a 	and	r2,r4,r2
  8006ac:	10c7c83a 	sub	r3,r2,r3
  8006b0:	18000326 	beq	r3,zero,8006c0 <_malloc_r+0x13c>
  8006b4:	80e1883a 	add	r16,r16,r3
  8006b8:	00c7c83a 	sub	r3,zero,r3
  8006bc:	80c00015 	stw	r3,0(r16)
  8006c0:	dfc00417 	ldw	ra,16(sp)
  8006c4:	dcc00317 	ldw	r19,12(sp)
  8006c8:	dc800217 	ldw	r18,8(sp)
  8006cc:	dc400117 	ldw	r17,4(sp)
  8006d0:	dc000017 	ldw	r16,0(sp)
  8006d4:	dec00504 	addi	sp,sp,20
  8006d8:	f800283a 	ret

008006dc <_realloc_r>:
  8006dc:	2800021e 	bne	r5,zero,8006e8 <_realloc_r+0xc>
  8006e0:	300b883a 	mov	r5,r6
  8006e4:	08005841 	jmpi	800584 <_malloc_r>
  8006e8:	defffb04 	addi	sp,sp,-20
  8006ec:	dc400115 	stw	r17,4(sp)
  8006f0:	dc000015 	stw	r16,0(sp)
  8006f4:	dfc00415 	stw	ra,16(sp)
  8006f8:	dcc00315 	stw	r19,12(sp)
  8006fc:	dc800215 	stw	r18,8(sp)
  800700:	3023883a 	mov	r17,r6
  800704:	2821883a 	mov	r16,r5
  800708:	3000021e 	bne	r6,zero,800714 <_realloc_r+0x38>
  80070c:	08004a00 	call	8004a0 <_free_r>
  800710:	00001306 	br	800760 <_realloc_r+0x84>
  800714:	2025883a 	mov	r18,r4
  800718:	0800dac0 	call	800dac <_malloc_usable_size_r>
  80071c:	14400e2e 	bgeu	r2,r17,800758 <_realloc_r+0x7c>
  800720:	880b883a 	mov	r5,r17
  800724:	9009883a 	mov	r4,r18
  800728:	08005840 	call	800584 <_malloc_r>
  80072c:	1027883a 	mov	r19,r2
  800730:	10000b26 	beq	r2,zero,800760 <_realloc_r+0x84>
  800734:	880d883a 	mov	r6,r17
  800738:	800b883a 	mov	r5,r16
  80073c:	1009883a 	mov	r4,r2
  800740:	0800d840 	call	800d84 <memcpy>
  800744:	800b883a 	mov	r5,r16
  800748:	9009883a 	mov	r4,r18
  80074c:	08004a00 	call	8004a0 <_free_r>
  800750:	9805883a 	mov	r2,r19
  800754:	00000306 	br	800764 <_realloc_r+0x88>
  800758:	8005883a 	mov	r2,r16
  80075c:	00000106 	br	800764 <_realloc_r+0x88>
  800760:	0005883a 	mov	r2,zero
  800764:	dfc00417 	ldw	ra,16(sp)
  800768:	dcc00317 	ldw	r19,12(sp)
  80076c:	dc800217 	ldw	r18,8(sp)
  800770:	dc400117 	ldw	r17,4(sp)
  800774:	dc000017 	ldw	r16,0(sp)
  800778:	dec00504 	addi	sp,sp,20
  80077c:	f800283a 	ret

00800780 <_sbrk_r>:
  800780:	defffd04 	addi	sp,sp,-12
  800784:	dc000015 	stw	r16,0(sp)
  800788:	04002034 	movhi	r16,128
  80078c:	dc400115 	stw	r17,4(sp)
  800790:	84056b04 	addi	r16,r16,5548
  800794:	2023883a 	mov	r17,r4
  800798:	2809883a 	mov	r4,r5
  80079c:	dfc00215 	stw	ra,8(sp)
  8007a0:	80000015 	stw	zero,0(r16)
  8007a4:	08011480 	call	801148 <sbrk>
  8007a8:	00ffffc4 	movi	r3,-1
  8007ac:	10c0031e 	bne	r2,r3,8007bc <_sbrk_r+0x3c>
  8007b0:	80c00017 	ldw	r3,0(r16)
  8007b4:	18000126 	beq	r3,zero,8007bc <_sbrk_r+0x3c>
  8007b8:	88c00015 	stw	r3,0(r17)
  8007bc:	dfc00217 	ldw	ra,8(sp)
  8007c0:	dc400117 	ldw	r17,4(sp)
  8007c4:	dc000017 	ldw	r16,0(sp)
  8007c8:	dec00304 	addi	sp,sp,12
  8007cc:	f800283a 	ret

008007d0 <print_repeat>:
  8007d0:	defffb04 	addi	sp,sp,-20
  8007d4:	dc800315 	stw	r18,12(sp)
  8007d8:	dc400215 	stw	r17,8(sp)
  8007dc:	dc000115 	stw	r16,4(sp)
  8007e0:	dfc00415 	stw	ra,16(sp)
  8007e4:	2025883a 	mov	r18,r4
  8007e8:	2823883a 	mov	r17,r5
  8007ec:	d9800005 	stb	r6,0(sp)
  8007f0:	3821883a 	mov	r16,r7
  8007f4:	04000a0e 	bge	zero,r16,800820 <print_repeat+0x50>
  8007f8:	88800117 	ldw	r2,4(r17)
  8007fc:	01c00044 	movi	r7,1
  800800:	d80d883a 	mov	r6,sp
  800804:	880b883a 	mov	r5,r17
  800808:	9009883a 	mov	r4,r18
  80080c:	103ee83a 	callr	r2
  800810:	843fffc4 	addi	r16,r16,-1
  800814:	103ff726 	beq	r2,zero,8007f4 <__alt_data_end+0xff8007f4>
  800818:	00bfffc4 	movi	r2,-1
  80081c:	00000106 	br	800824 <print_repeat+0x54>
  800820:	0005883a 	mov	r2,zero
  800824:	dfc00417 	ldw	ra,16(sp)
  800828:	dc800317 	ldw	r18,12(sp)
  80082c:	dc400217 	ldw	r17,8(sp)
  800830:	dc000117 	ldw	r16,4(sp)
  800834:	dec00504 	addi	sp,sp,20
  800838:	f800283a 	ret

0080083c <___svfprintf_internal_r>:
  80083c:	deffe504 	addi	sp,sp,-108
  800840:	d8c00804 	addi	r3,sp,32
  800844:	ddc01815 	stw	r23,96(sp)
  800848:	dd801715 	stw	r22,92(sp)
  80084c:	dd401615 	stw	r21,88(sp)
  800850:	dd001515 	stw	r20,84(sp)
  800854:	dcc01415 	stw	r19,80(sp)
  800858:	dc801315 	stw	r18,76(sp)
  80085c:	dc401215 	stw	r17,72(sp)
  800860:	dc001115 	stw	r16,68(sp)
  800864:	dfc01a15 	stw	ra,104(sp)
  800868:	df001915 	stw	fp,100(sp)
  80086c:	2029883a 	mov	r20,r4
  800870:	2823883a 	mov	r17,r5
  800874:	382d883a 	mov	r22,r7
  800878:	d9800f15 	stw	r6,60(sp)
  80087c:	0021883a 	mov	r16,zero
  800880:	d8000e15 	stw	zero,56(sp)
  800884:	d8000a15 	stw	zero,40(sp)
  800888:	002b883a 	mov	r21,zero
  80088c:	0027883a 	mov	r19,zero
  800890:	0025883a 	mov	r18,zero
  800894:	d8000c15 	stw	zero,48(sp)
  800898:	d8000b15 	stw	zero,44(sp)
  80089c:	002f883a 	mov	r23,zero
  8008a0:	d8c00915 	stw	r3,36(sp)
  8008a4:	d8c00f17 	ldw	r3,60(sp)
  8008a8:	19000003 	ldbu	r4,0(r3)
  8008ac:	20803fcc 	andi	r2,r4,255
  8008b0:	1080201c 	xori	r2,r2,128
  8008b4:	10bfe004 	addi	r2,r2,-128
  8008b8:	10011e26 	beq	r2,zero,800d34 <___svfprintf_internal_r+0x4f8>
  8008bc:	00c00044 	movi	r3,1
  8008c0:	b8c01426 	beq	r23,r3,800914 <___svfprintf_internal_r+0xd8>
  8008c4:	1dc00216 	blt	r3,r23,8008d0 <___svfprintf_internal_r+0x94>
  8008c8:	b8000626 	beq	r23,zero,8008e4 <___svfprintf_internal_r+0xa8>
  8008cc:	00011506 	br	800d24 <___svfprintf_internal_r+0x4e8>
  8008d0:	01400084 	movi	r5,2
  8008d4:	b9401d26 	beq	r23,r5,80094c <___svfprintf_internal_r+0x110>
  8008d8:	014000c4 	movi	r5,3
  8008dc:	b9402b26 	beq	r23,r5,80098c <___svfprintf_internal_r+0x150>
  8008e0:	00011006 	br	800d24 <___svfprintf_internal_r+0x4e8>
  8008e4:	01400944 	movi	r5,37
  8008e8:	1140fc26 	beq	r2,r5,800cdc <___svfprintf_internal_r+0x4a0>
  8008ec:	88800117 	ldw	r2,4(r17)
  8008f0:	d9000005 	stb	r4,0(sp)
  8008f4:	01c00044 	movi	r7,1
  8008f8:	d80d883a 	mov	r6,sp
  8008fc:	880b883a 	mov	r5,r17
  800900:	a009883a 	mov	r4,r20
  800904:	103ee83a 	callr	r2
  800908:	1000d81e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  80090c:	84000044 	addi	r16,r16,1
  800910:	00010406 	br	800d24 <___svfprintf_internal_r+0x4e8>
  800914:	01400c04 	movi	r5,48
  800918:	1140fa26 	beq	r2,r5,800d04 <___svfprintf_internal_r+0x4c8>
  80091c:	01400944 	movi	r5,37
  800920:	11400a1e 	bne	r2,r5,80094c <___svfprintf_internal_r+0x110>
  800924:	d8800005 	stb	r2,0(sp)
  800928:	88800117 	ldw	r2,4(r17)
  80092c:	b80f883a 	mov	r7,r23
  800930:	d80d883a 	mov	r6,sp
  800934:	880b883a 	mov	r5,r17
  800938:	a009883a 	mov	r4,r20
  80093c:	103ee83a 	callr	r2
  800940:	1000ca1e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  800944:	84000044 	addi	r16,r16,1
  800948:	0000f506 	br	800d20 <___svfprintf_internal_r+0x4e4>
  80094c:	25fff404 	addi	r23,r4,-48
  800950:	bdc03fcc 	andi	r23,r23,255
  800954:	00c00244 	movi	r3,9
  800958:	1dc00936 	bltu	r3,r23,800980 <___svfprintf_internal_r+0x144>
  80095c:	00bfffc4 	movi	r2,-1
  800960:	90800426 	beq	r18,r2,800974 <___svfprintf_internal_r+0x138>
  800964:	01400284 	movi	r5,10
  800968:	9009883a 	mov	r4,r18
  80096c:	0800f980 	call	800f98 <__mulsi3>
  800970:	00000106 	br	800978 <___svfprintf_internal_r+0x13c>
  800974:	0005883a 	mov	r2,zero
  800978:	b8a5883a 	add	r18,r23,r2
  80097c:	0000e206 	br	800d08 <___svfprintf_internal_r+0x4cc>
  800980:	01400b84 	movi	r5,46
  800984:	1140e426 	beq	r2,r5,800d18 <___svfprintf_internal_r+0x4dc>
  800988:	05c00084 	movi	r23,2
  80098c:	213ff404 	addi	r4,r4,-48
  800990:	27003fcc 	andi	fp,r4,255
  800994:	00c00244 	movi	r3,9
  800998:	1f000936 	bltu	r3,fp,8009c0 <___svfprintf_internal_r+0x184>
  80099c:	00bfffc4 	movi	r2,-1
  8009a0:	98800426 	beq	r19,r2,8009b4 <___svfprintf_internal_r+0x178>
  8009a4:	01400284 	movi	r5,10
  8009a8:	9809883a 	mov	r4,r19
  8009ac:	0800f980 	call	800f98 <__mulsi3>
  8009b0:	00000106 	br	8009b8 <___svfprintf_internal_r+0x17c>
  8009b4:	0005883a 	mov	r2,zero
  8009b8:	e0a7883a 	add	r19,fp,r2
  8009bc:	0000d906 	br	800d24 <___svfprintf_internal_r+0x4e8>
  8009c0:	00c01b04 	movi	r3,108
  8009c4:	10c0d226 	beq	r2,r3,800d10 <___svfprintf_internal_r+0x4d4>
  8009c8:	013fffc4 	movi	r4,-1
  8009cc:	99000226 	beq	r19,r4,8009d8 <___svfprintf_internal_r+0x19c>
  8009d0:	d8000b15 	stw	zero,44(sp)
  8009d4:	00000106 	br	8009dc <___svfprintf_internal_r+0x1a0>
  8009d8:	04c00044 	movi	r19,1
  8009dc:	01001a44 	movi	r4,105
  8009e0:	11001626 	beq	r2,r4,800a3c <___svfprintf_internal_r+0x200>
  8009e4:	20800916 	blt	r4,r2,800a0c <___svfprintf_internal_r+0x1d0>
  8009e8:	010018c4 	movi	r4,99
  8009ec:	11008826 	beq	r2,r4,800c10 <___svfprintf_internal_r+0x3d4>
  8009f0:	01001904 	movi	r4,100
  8009f4:	11001126 	beq	r2,r4,800a3c <___svfprintf_internal_r+0x200>
  8009f8:	01001604 	movi	r4,88
  8009fc:	1100c81e 	bne	r2,r4,800d20 <___svfprintf_internal_r+0x4e4>
  800a00:	00c00044 	movi	r3,1
  800a04:	d8c00e15 	stw	r3,56(sp)
  800a08:	00001506 	br	800a60 <___svfprintf_internal_r+0x224>
  800a0c:	01001cc4 	movi	r4,115
  800a10:	11009826 	beq	r2,r4,800c74 <___svfprintf_internal_r+0x438>
  800a14:	20800416 	blt	r4,r2,800a28 <___svfprintf_internal_r+0x1ec>
  800a18:	01001bc4 	movi	r4,111
  800a1c:	1100c01e 	bne	r2,r4,800d20 <___svfprintf_internal_r+0x4e4>
  800a20:	05400204 	movi	r21,8
  800a24:	00000f06 	br	800a64 <___svfprintf_internal_r+0x228>
  800a28:	01001d44 	movi	r4,117
  800a2c:	11000d26 	beq	r2,r4,800a64 <___svfprintf_internal_r+0x228>
  800a30:	01001e04 	movi	r4,120
  800a34:	11000a26 	beq	r2,r4,800a60 <___svfprintf_internal_r+0x224>
  800a38:	0000b906 	br	800d20 <___svfprintf_internal_r+0x4e4>
  800a3c:	d8c00a17 	ldw	r3,40(sp)
  800a40:	b7000104 	addi	fp,r22,4
  800a44:	18000726 	beq	r3,zero,800a64 <___svfprintf_internal_r+0x228>
  800a48:	df000d15 	stw	fp,52(sp)
  800a4c:	b5c00017 	ldw	r23,0(r22)
  800a50:	b800080e 	bge	r23,zero,800a74 <___svfprintf_internal_r+0x238>
  800a54:	05efc83a 	sub	r23,zero,r23
  800a58:	02400044 	movi	r9,1
  800a5c:	00000606 	br	800a78 <___svfprintf_internal_r+0x23c>
  800a60:	05400404 	movi	r21,16
  800a64:	b0c00104 	addi	r3,r22,4
  800a68:	d8c00d15 	stw	r3,52(sp)
  800a6c:	b5c00017 	ldw	r23,0(r22)
  800a70:	d8000a15 	stw	zero,40(sp)
  800a74:	0013883a 	mov	r9,zero
  800a78:	d839883a 	mov	fp,sp
  800a7c:	b8001726 	beq	r23,zero,800adc <___svfprintf_internal_r+0x2a0>
  800a80:	a80b883a 	mov	r5,r21
  800a84:	b809883a 	mov	r4,r23
  800a88:	da401015 	stw	r9,64(sp)
  800a8c:	0800edc0 	call	800edc <__udivsi3>
  800a90:	a80b883a 	mov	r5,r21
  800a94:	1009883a 	mov	r4,r2
  800a98:	102d883a 	mov	r22,r2
  800a9c:	0800f980 	call	800f98 <__mulsi3>
  800aa0:	b885c83a 	sub	r2,r23,r2
  800aa4:	00c00244 	movi	r3,9
  800aa8:	da401017 	ldw	r9,64(sp)
  800aac:	18800216 	blt	r3,r2,800ab8 <___svfprintf_internal_r+0x27c>
  800ab0:	10800c04 	addi	r2,r2,48
  800ab4:	00000506 	br	800acc <___svfprintf_internal_r+0x290>
  800ab8:	d8c00e17 	ldw	r3,56(sp)
  800abc:	18000226 	beq	r3,zero,800ac8 <___svfprintf_internal_r+0x28c>
  800ac0:	10800dc4 	addi	r2,r2,55
  800ac4:	00000106 	br	800acc <___svfprintf_internal_r+0x290>
  800ac8:	108015c4 	addi	r2,r2,87
  800acc:	e0800005 	stb	r2,0(fp)
  800ad0:	b02f883a 	mov	r23,r22
  800ad4:	e7000044 	addi	fp,fp,1
  800ad8:	003fe806 	br	800a7c <__alt_data_end+0xff800a7c>
  800adc:	e6efc83a 	sub	r23,fp,sp
  800ae0:	9dc5c83a 	sub	r2,r19,r23
  800ae4:	0080090e 	bge	zero,r2,800b0c <___svfprintf_internal_r+0x2d0>
  800ae8:	e085883a 	add	r2,fp,r2
  800aec:	01400c04 	movi	r5,48
  800af0:	d8c00917 	ldw	r3,36(sp)
  800af4:	e009883a 	mov	r4,fp
  800af8:	e0c0032e 	bgeu	fp,r3,800b08 <___svfprintf_internal_r+0x2cc>
  800afc:	e7000044 	addi	fp,fp,1
  800b00:	21400005 	stb	r5,0(r4)
  800b04:	e0bffa1e 	bne	fp,r2,800af0 <__alt_data_end+0xff800af0>
  800b08:	e6efc83a 	sub	r23,fp,sp
  800b0c:	d8c00b17 	ldw	r3,44(sp)
  800b10:	4dd1883a 	add	r8,r9,r23
  800b14:	922dc83a 	sub	r22,r18,r8
  800b18:	18001626 	beq	r3,zero,800b74 <___svfprintf_internal_r+0x338>
  800b1c:	48000a26 	beq	r9,zero,800b48 <___svfprintf_internal_r+0x30c>
  800b20:	00800b44 	movi	r2,45
  800b24:	d8800805 	stb	r2,32(sp)
  800b28:	88800117 	ldw	r2,4(r17)
  800b2c:	01c00044 	movi	r7,1
  800b30:	d9800804 	addi	r6,sp,32
  800b34:	880b883a 	mov	r5,r17
  800b38:	a009883a 	mov	r4,r20
  800b3c:	103ee83a 	callr	r2
  800b40:	10004a1e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  800b44:	84000044 	addi	r16,r16,1
  800b48:	0580070e 	bge	zero,r22,800b68 <___svfprintf_internal_r+0x32c>
  800b4c:	b00f883a 	mov	r7,r22
  800b50:	01800c04 	movi	r6,48
  800b54:	880b883a 	mov	r5,r17
  800b58:	a009883a 	mov	r4,r20
  800b5c:	08007d00 	call	8007d0 <print_repeat>
  800b60:	1000421e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  800b64:	85a1883a 	add	r16,r16,r22
  800b68:	e02d883a 	mov	r22,fp
  800b6c:	bf2fc83a 	sub	r23,r23,fp
  800b70:	00002006 	br	800bf4 <___svfprintf_internal_r+0x3b8>
  800b74:	0580090e 	bge	zero,r22,800b9c <___svfprintf_internal_r+0x360>
  800b78:	b00f883a 	mov	r7,r22
  800b7c:	01800804 	movi	r6,32
  800b80:	880b883a 	mov	r5,r17
  800b84:	a009883a 	mov	r4,r20
  800b88:	da401015 	stw	r9,64(sp)
  800b8c:	08007d00 	call	8007d0 <print_repeat>
  800b90:	da401017 	ldw	r9,64(sp)
  800b94:	1000351e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  800b98:	85a1883a 	add	r16,r16,r22
  800b9c:	483ff226 	beq	r9,zero,800b68 <__alt_data_end+0xff800b68>
  800ba0:	00800b44 	movi	r2,45
  800ba4:	d8800805 	stb	r2,32(sp)
  800ba8:	88800117 	ldw	r2,4(r17)
  800bac:	01c00044 	movi	r7,1
  800bb0:	d9800804 	addi	r6,sp,32
  800bb4:	880b883a 	mov	r5,r17
  800bb8:	a009883a 	mov	r4,r20
  800bbc:	103ee83a 	callr	r2
  800bc0:	10002a1e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  800bc4:	84000044 	addi	r16,r16,1
  800bc8:	003fe706 	br	800b68 <__alt_data_end+0xff800b68>
  800bcc:	b5bfffc4 	addi	r22,r22,-1
  800bd0:	b0800003 	ldbu	r2,0(r22)
  800bd4:	01c00044 	movi	r7,1
  800bd8:	d9800804 	addi	r6,sp,32
  800bdc:	d8800805 	stb	r2,32(sp)
  800be0:	88800117 	ldw	r2,4(r17)
  800be4:	880b883a 	mov	r5,r17
  800be8:	a009883a 	mov	r4,r20
  800bec:	103ee83a 	callr	r2
  800bf0:	10001e1e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  800bf4:	8585c83a 	sub	r2,r16,r22
  800bf8:	b5c9883a 	add	r4,r22,r23
  800bfc:	e085883a 	add	r2,fp,r2
  800c00:	013ff216 	blt	zero,r4,800bcc <__alt_data_end+0xff800bcc>
  800c04:	1021883a 	mov	r16,r2
  800c08:	dd800d17 	ldw	r22,52(sp)
  800c0c:	00004406 	br	800d20 <___svfprintf_internal_r+0x4e4>
  800c10:	00800044 	movi	r2,1
  800c14:	1480080e 	bge	r2,r18,800c38 <___svfprintf_internal_r+0x3fc>
  800c18:	95ffffc4 	addi	r23,r18,-1
  800c1c:	b80f883a 	mov	r7,r23
  800c20:	01800804 	movi	r6,32
  800c24:	880b883a 	mov	r5,r17
  800c28:	a009883a 	mov	r4,r20
  800c2c:	08007d00 	call	8007d0 <print_repeat>
  800c30:	10000e1e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  800c34:	85e1883a 	add	r16,r16,r23
  800c38:	b0800017 	ldw	r2,0(r22)
  800c3c:	01c00044 	movi	r7,1
  800c40:	d80d883a 	mov	r6,sp
  800c44:	d8800005 	stb	r2,0(sp)
  800c48:	88800117 	ldw	r2,4(r17)
  800c4c:	880b883a 	mov	r5,r17
  800c50:	a009883a 	mov	r4,r20
  800c54:	b5c00104 	addi	r23,r22,4
  800c58:	103ee83a 	callr	r2
  800c5c:	1000031e 	bne	r2,zero,800c6c <___svfprintf_internal_r+0x430>
  800c60:	84000044 	addi	r16,r16,1
  800c64:	b82d883a 	mov	r22,r23
  800c68:	00002d06 	br	800d20 <___svfprintf_internal_r+0x4e4>
  800c6c:	00bfffc4 	movi	r2,-1
  800c70:	00003106 	br	800d38 <___svfprintf_internal_r+0x4fc>
  800c74:	b5c00017 	ldw	r23,0(r22)
  800c78:	b7000104 	addi	fp,r22,4
  800c7c:	b809883a 	mov	r4,r23
  800c80:	0800dc80 	call	800dc8 <strlen>
  800c84:	9091c83a 	sub	r8,r18,r2
  800c88:	102d883a 	mov	r22,r2
  800c8c:	0200090e 	bge	zero,r8,800cb4 <___svfprintf_internal_r+0x478>
  800c90:	400f883a 	mov	r7,r8
  800c94:	01800804 	movi	r6,32
  800c98:	880b883a 	mov	r5,r17
  800c9c:	a009883a 	mov	r4,r20
  800ca0:	da001015 	stw	r8,64(sp)
  800ca4:	08007d00 	call	8007d0 <print_repeat>
  800ca8:	da001017 	ldw	r8,64(sp)
  800cac:	103fef1e 	bne	r2,zero,800c6c <__alt_data_end+0xff800c6c>
  800cb0:	8221883a 	add	r16,r16,r8
  800cb4:	88800117 	ldw	r2,4(r17)
  800cb8:	b00f883a 	mov	r7,r22
  800cbc:	b80d883a 	mov	r6,r23
  800cc0:	880b883a 	mov	r5,r17
  800cc4:	a009883a 	mov	r4,r20
  800cc8:	103ee83a 	callr	r2
  800ccc:	103fe71e 	bne	r2,zero,800c6c <__alt_data_end+0xff800c6c>
  800cd0:	85a1883a 	add	r16,r16,r22
  800cd4:	e02d883a 	mov	r22,fp
  800cd8:	00001106 	br	800d20 <___svfprintf_internal_r+0x4e4>
  800cdc:	00c00044 	movi	r3,1
  800ce0:	04ffffc4 	movi	r19,-1
  800ce4:	d8000e15 	stw	zero,56(sp)
  800ce8:	d8c00a15 	stw	r3,40(sp)
  800cec:	05400284 	movi	r21,10
  800cf0:	9825883a 	mov	r18,r19
  800cf4:	d8000c15 	stw	zero,48(sp)
  800cf8:	d8000b15 	stw	zero,44(sp)
  800cfc:	182f883a 	mov	r23,r3
  800d00:	00000806 	br	800d24 <___svfprintf_internal_r+0x4e8>
  800d04:	ddc00b15 	stw	r23,44(sp)
  800d08:	05c00084 	movi	r23,2
  800d0c:	00000506 	br	800d24 <___svfprintf_internal_r+0x4e8>
  800d10:	00c00044 	movi	r3,1
  800d14:	d8c00c15 	stw	r3,48(sp)
  800d18:	05c000c4 	movi	r23,3
  800d1c:	00000106 	br	800d24 <___svfprintf_internal_r+0x4e8>
  800d20:	002f883a 	mov	r23,zero
  800d24:	d8c00f17 	ldw	r3,60(sp)
  800d28:	18c00044 	addi	r3,r3,1
  800d2c:	d8c00f15 	stw	r3,60(sp)
  800d30:	003edc06 	br	8008a4 <__alt_data_end+0xff8008a4>
  800d34:	8005883a 	mov	r2,r16
  800d38:	dfc01a17 	ldw	ra,104(sp)
  800d3c:	df001917 	ldw	fp,100(sp)
  800d40:	ddc01817 	ldw	r23,96(sp)
  800d44:	dd801717 	ldw	r22,92(sp)
  800d48:	dd401617 	ldw	r21,88(sp)
  800d4c:	dd001517 	ldw	r20,84(sp)
  800d50:	dcc01417 	ldw	r19,80(sp)
  800d54:	dc801317 	ldw	r18,76(sp)
  800d58:	dc401217 	ldw	r17,72(sp)
  800d5c:	dc001117 	ldw	r16,68(sp)
  800d60:	dec01b04 	addi	sp,sp,108
  800d64:	f800283a 	ret

00800d68 <__vfprintf_internal_unused>:
  800d68:	00802034 	movhi	r2,128
  800d6c:	10850a04 	addi	r2,r2,5160
  800d70:	300f883a 	mov	r7,r6
  800d74:	280d883a 	mov	r6,r5
  800d78:	200b883a 	mov	r5,r4
  800d7c:	11000017 	ldw	r4,0(r2)
  800d80:	080083c1 	jmpi	80083c <___svfprintf_internal_r>

00800d84 <memcpy>:
  800d84:	2005883a 	mov	r2,r4
  800d88:	2007883a 	mov	r3,r4
  800d8c:	218d883a 	add	r6,r4,r6
  800d90:	19800526 	beq	r3,r6,800da8 <memcpy+0x24>
  800d94:	29000003 	ldbu	r4,0(r5)
  800d98:	18c00044 	addi	r3,r3,1
  800d9c:	29400044 	addi	r5,r5,1
  800da0:	193fffc5 	stb	r4,-1(r3)
  800da4:	003ffa06 	br	800d90 <__alt_data_end+0xff800d90>
  800da8:	f800283a 	ret

00800dac <_malloc_usable_size_r>:
  800dac:	28bfff17 	ldw	r2,-4(r5)
  800db0:	1000030e 	bge	r2,zero,800dc0 <_malloc_usable_size_r+0x14>
  800db4:	288b883a 	add	r5,r5,r2
  800db8:	28ffff17 	ldw	r3,-4(r5)
  800dbc:	10c5883a 	add	r2,r2,r3
  800dc0:	10bfff04 	addi	r2,r2,-4
  800dc4:	f800283a 	ret

00800dc8 <strlen>:
  800dc8:	2005883a 	mov	r2,r4
  800dcc:	10c00007 	ldb	r3,0(r2)
  800dd0:	18000226 	beq	r3,zero,800ddc <strlen+0x14>
  800dd4:	10800044 	addi	r2,r2,1
  800dd8:	003ffc06 	br	800dcc <__alt_data_end+0xff800dcc>
  800ddc:	1105c83a 	sub	r2,r2,r4
  800de0:	f800283a 	ret

00800de4 <__divsi3>:
  800de4:	20001b16 	blt	r4,zero,800e54 <__divsi3+0x70>
  800de8:	000f883a 	mov	r7,zero
  800dec:	28001616 	blt	r5,zero,800e48 <__divsi3+0x64>
  800df0:	200d883a 	mov	r6,r4
  800df4:	29001a2e 	bgeu	r5,r4,800e60 <__divsi3+0x7c>
  800df8:	00800804 	movi	r2,32
  800dfc:	00c00044 	movi	r3,1
  800e00:	00000106 	br	800e08 <__divsi3+0x24>
  800e04:	10000d26 	beq	r2,zero,800e3c <__divsi3+0x58>
  800e08:	294b883a 	add	r5,r5,r5
  800e0c:	10bfffc4 	addi	r2,r2,-1
  800e10:	18c7883a 	add	r3,r3,r3
  800e14:	293ffb36 	bltu	r5,r4,800e04 <__alt_data_end+0xff800e04>
  800e18:	0005883a 	mov	r2,zero
  800e1c:	18000726 	beq	r3,zero,800e3c <__divsi3+0x58>
  800e20:	0005883a 	mov	r2,zero
  800e24:	31400236 	bltu	r6,r5,800e30 <__divsi3+0x4c>
  800e28:	314dc83a 	sub	r6,r6,r5
  800e2c:	10c4b03a 	or	r2,r2,r3
  800e30:	1806d07a 	srli	r3,r3,1
  800e34:	280ad07a 	srli	r5,r5,1
  800e38:	183ffa1e 	bne	r3,zero,800e24 <__alt_data_end+0xff800e24>
  800e3c:	38000126 	beq	r7,zero,800e44 <__divsi3+0x60>
  800e40:	0085c83a 	sub	r2,zero,r2
  800e44:	f800283a 	ret
  800e48:	014bc83a 	sub	r5,zero,r5
  800e4c:	39c0005c 	xori	r7,r7,1
  800e50:	003fe706 	br	800df0 <__alt_data_end+0xff800df0>
  800e54:	0109c83a 	sub	r4,zero,r4
  800e58:	01c00044 	movi	r7,1
  800e5c:	003fe306 	br	800dec <__alt_data_end+0xff800dec>
  800e60:	00c00044 	movi	r3,1
  800e64:	003fee06 	br	800e20 <__alt_data_end+0xff800e20>

00800e68 <__modsi3>:
  800e68:	20001716 	blt	r4,zero,800ec8 <__modsi3+0x60>
  800e6c:	000f883a 	mov	r7,zero
  800e70:	2005883a 	mov	r2,r4
  800e74:	28001216 	blt	r5,zero,800ec0 <__modsi3+0x58>
  800e78:	2900162e 	bgeu	r5,r4,800ed4 <__modsi3+0x6c>
  800e7c:	01800804 	movi	r6,32
  800e80:	00c00044 	movi	r3,1
  800e84:	00000106 	br	800e8c <__modsi3+0x24>
  800e88:	30000a26 	beq	r6,zero,800eb4 <__modsi3+0x4c>
  800e8c:	294b883a 	add	r5,r5,r5
  800e90:	31bfffc4 	addi	r6,r6,-1
  800e94:	18c7883a 	add	r3,r3,r3
  800e98:	293ffb36 	bltu	r5,r4,800e88 <__alt_data_end+0xff800e88>
  800e9c:	18000526 	beq	r3,zero,800eb4 <__modsi3+0x4c>
  800ea0:	1806d07a 	srli	r3,r3,1
  800ea4:	11400136 	bltu	r2,r5,800eac <__modsi3+0x44>
  800ea8:	1145c83a 	sub	r2,r2,r5
  800eac:	280ad07a 	srli	r5,r5,1
  800eb0:	183ffb1e 	bne	r3,zero,800ea0 <__alt_data_end+0xff800ea0>
  800eb4:	38000126 	beq	r7,zero,800ebc <__modsi3+0x54>
  800eb8:	0085c83a 	sub	r2,zero,r2
  800ebc:	f800283a 	ret
  800ec0:	014bc83a 	sub	r5,zero,r5
  800ec4:	003fec06 	br	800e78 <__alt_data_end+0xff800e78>
  800ec8:	0109c83a 	sub	r4,zero,r4
  800ecc:	01c00044 	movi	r7,1
  800ed0:	003fe706 	br	800e70 <__alt_data_end+0xff800e70>
  800ed4:	00c00044 	movi	r3,1
  800ed8:	003ff106 	br	800ea0 <__alt_data_end+0xff800ea0>

00800edc <__udivsi3>:
  800edc:	200d883a 	mov	r6,r4
  800ee0:	2900152e 	bgeu	r5,r4,800f38 <__udivsi3+0x5c>
  800ee4:	28001416 	blt	r5,zero,800f38 <__udivsi3+0x5c>
  800ee8:	00800804 	movi	r2,32
  800eec:	00c00044 	movi	r3,1
  800ef0:	00000206 	br	800efc <__udivsi3+0x20>
  800ef4:	10000e26 	beq	r2,zero,800f30 <__udivsi3+0x54>
  800ef8:	28000516 	blt	r5,zero,800f10 <__udivsi3+0x34>
  800efc:	294b883a 	add	r5,r5,r5
  800f00:	10bfffc4 	addi	r2,r2,-1
  800f04:	18c7883a 	add	r3,r3,r3
  800f08:	293ffa36 	bltu	r5,r4,800ef4 <__alt_data_end+0xff800ef4>
  800f0c:	18000826 	beq	r3,zero,800f30 <__udivsi3+0x54>
  800f10:	0005883a 	mov	r2,zero
  800f14:	31400236 	bltu	r6,r5,800f20 <__udivsi3+0x44>
  800f18:	314dc83a 	sub	r6,r6,r5
  800f1c:	10c4b03a 	or	r2,r2,r3
  800f20:	1806d07a 	srli	r3,r3,1
  800f24:	280ad07a 	srli	r5,r5,1
  800f28:	183ffa1e 	bne	r3,zero,800f14 <__alt_data_end+0xff800f14>
  800f2c:	f800283a 	ret
  800f30:	0005883a 	mov	r2,zero
  800f34:	f800283a 	ret
  800f38:	00c00044 	movi	r3,1
  800f3c:	003ff406 	br	800f10 <__alt_data_end+0xff800f10>

00800f40 <__umodsi3>:
  800f40:	2005883a 	mov	r2,r4
  800f44:	2900122e 	bgeu	r5,r4,800f90 <__umodsi3+0x50>
  800f48:	28001116 	blt	r5,zero,800f90 <__umodsi3+0x50>
  800f4c:	01800804 	movi	r6,32
  800f50:	00c00044 	movi	r3,1
  800f54:	00000206 	br	800f60 <__umodsi3+0x20>
  800f58:	30000c26 	beq	r6,zero,800f8c <__umodsi3+0x4c>
  800f5c:	28000516 	blt	r5,zero,800f74 <__umodsi3+0x34>
  800f60:	294b883a 	add	r5,r5,r5
  800f64:	31bfffc4 	addi	r6,r6,-1
  800f68:	18c7883a 	add	r3,r3,r3
  800f6c:	293ffa36 	bltu	r5,r4,800f58 <__alt_data_end+0xff800f58>
  800f70:	18000626 	beq	r3,zero,800f8c <__umodsi3+0x4c>
  800f74:	1806d07a 	srli	r3,r3,1
  800f78:	11400136 	bltu	r2,r5,800f80 <__umodsi3+0x40>
  800f7c:	1145c83a 	sub	r2,r2,r5
  800f80:	280ad07a 	srli	r5,r5,1
  800f84:	183ffb1e 	bne	r3,zero,800f74 <__alt_data_end+0xff800f74>
  800f88:	f800283a 	ret
  800f8c:	f800283a 	ret
  800f90:	00c00044 	movi	r3,1
  800f94:	003ff706 	br	800f74 <__alt_data_end+0xff800f74>

00800f98 <__mulsi3>:
  800f98:	0005883a 	mov	r2,zero
  800f9c:	20000726 	beq	r4,zero,800fbc <__mulsi3+0x24>
  800fa0:	20c0004c 	andi	r3,r4,1
  800fa4:	2008d07a 	srli	r4,r4,1
  800fa8:	18000126 	beq	r3,zero,800fb0 <__mulsi3+0x18>
  800fac:	1145883a 	add	r2,r2,r5
  800fb0:	294b883a 	add	r5,r5,r5
  800fb4:	203ffa1e 	bne	r4,zero,800fa0 <__alt_data_end+0xff800fa0>
  800fb8:	f800283a 	ret
  800fbc:	f800283a 	ret

00800fc0 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  800fc0:	00802034 	movhi	r2,128
  800fc4:	1084f304 	addi	r2,r2,5068
  800fc8:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  800fcc:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  800fd0:	01002034 	movhi	r4,128
  800fd4:	01800044 	movi	r6,1
  800fd8:	d80b883a 	mov	r5,sp
  800fdc:	21050c04 	addi	r4,r4,5168
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  800fe0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  800fe4:	08011b80 	call	8011b8 <altera_avalon_jtag_uart_read>
  800fe8:	0080020e 	bge	zero,r2,800ff4 <alt_getchar+0x34>
        return -1;
    }
    return c;
  800fec:	d8800007 	ldb	r2,0(sp)
  800ff0:	00000106 	br	800ff8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  800ff4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  800ff8:	dfc00117 	ldw	ra,4(sp)
  800ffc:	dec00204 	addi	sp,sp,8
  801000:	f800283a 	ret

00801004 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  801004:	deffff04 	addi	sp,sp,-4
  801008:	01002034 	movhi	r4,128
  80100c:	01402034 	movhi	r5,128
  801010:	dfc00015 	stw	ra,0(sp)
  801014:	2104bb04 	addi	r4,r4,4844
  801018:	29451204 	addi	r5,r5,5192

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80101c:	2140061e 	bne	r4,r5,801038 <alt_load+0x34>
  801020:	01002034 	movhi	r4,128
  801024:	01402034 	movhi	r5,128
  801028:	21000804 	addi	r4,r4,32
  80102c:	29400804 	addi	r5,r5,32
  801030:	2140121e 	bne	r4,r5,80107c <alt_load+0x78>
  801034:	00000b06 	br	801064 <alt_load+0x60>
  801038:	00c02034 	movhi	r3,128
  80103c:	18c51204 	addi	r3,r3,5192
  801040:	1907c83a 	sub	r3,r3,r4
  801044:	0005883a 	mov	r2,zero
  {
    while( to != end )
  801048:	10fff526 	beq	r2,r3,801020 <__alt_data_end+0xff801020>
    {
      *to++ = *from++;
  80104c:	114f883a 	add	r7,r2,r5
  801050:	39c00017 	ldw	r7,0(r7)
  801054:	110d883a 	add	r6,r2,r4
  801058:	10800104 	addi	r2,r2,4
  80105c:	31c00015 	stw	r7,0(r6)
  801060:	003ff906 	br	801048 <__alt_data_end+0xff801048>
  801064:	01002034 	movhi	r4,128
  801068:	01402034 	movhi	r5,128
  80106c:	2104ad04 	addi	r4,r4,4788
  801070:	2944ad04 	addi	r5,r5,4788

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  801074:	2140101e 	bne	r4,r5,8010b8 <alt_load+0xb4>
  801078:	00000b06 	br	8010a8 <alt_load+0xa4>
  80107c:	00c02034 	movhi	r3,128
  801080:	18c00804 	addi	r3,r3,32
  801084:	1907c83a 	sub	r3,r3,r4
  801088:	0005883a 	mov	r2,zero
  {
    while( to != end )
  80108c:	10fff526 	beq	r2,r3,801064 <__alt_data_end+0xff801064>
    {
      *to++ = *from++;
  801090:	114f883a 	add	r7,r2,r5
  801094:	39c00017 	ldw	r7,0(r7)
  801098:	110d883a 	add	r6,r2,r4
  80109c:	10800104 	addi	r2,r2,4
  8010a0:	31c00015 	stw	r7,0(r6)
  8010a4:	003ff906 	br	80108c <__alt_data_end+0xff80108c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8010a8:	08012480 	call	801248 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  8010ac:	dfc00017 	ldw	ra,0(sp)
  8010b0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  8010b4:	08012681 	jmpi	801268 <alt_icache_flush_all>
  8010b8:	00c02034 	movhi	r3,128
  8010bc:	18c4bb04 	addi	r3,r3,4844
  8010c0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8010c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
  8010c8:	18bff726 	beq	r3,r2,8010a8 <__alt_data_end+0xff8010a8>
    {
      *to++ = *from++;
  8010cc:	114f883a 	add	r7,r2,r5
  8010d0:	39c00017 	ldw	r7,0(r7)
  8010d4:	110d883a 	add	r6,r2,r4
  8010d8:	10800104 	addi	r2,r2,4
  8010dc:	31c00015 	stw	r7,0(r6)
  8010e0:	003ff906 	br	8010c8 <__alt_data_end+0xff8010c8>

008010e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8010e4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8010e8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8010ec:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8010f0:	08011940 	call	801194 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8010f4:	08011b40 	call	8011b4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  8010f8:	d1a06317 	ldw	r6,-32372(gp)
  8010fc:	d1606417 	ldw	r5,-32368(gp)
  801100:	d1206517 	ldw	r4,-32364(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  801104:	dfc00017 	ldw	ra,0(sp)
  801108:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  80110c:	08001d41 	jmpi	8001d4 <main>

00801110 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  801110:	defffe04 	addi	sp,sp,-8
  801114:	dc000015 	stw	r16,0(sp)
  801118:	dfc00115 	stw	ra,4(sp)
  80111c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
  801120:	0800dc80 	call	800dc8 <strlen>
  801124:	01002034 	movhi	r4,128
  801128:	000f883a 	mov	r7,zero
  80112c:	100d883a 	mov	r6,r2
  801130:	800b883a 	mov	r5,r16
  801134:	21050c04 	addi	r4,r4,5168
#else
    return fputs(str, stdout);
#endif
#endif
}
  801138:	dfc00117 	ldw	ra,4(sp)
  80113c:	dc000017 	ldw	r16,0(sp)
  801140:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
  801144:	08012141 	jmpi	801214 <altera_avalon_jtag_uart_write>

00801148 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801148:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80114c:	00bfff84 	movi	r2,-2
  801150:	2884703a 	and	r2,r5,r2
  801154:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  801158:	d0a00217 	ldw	r2,-32760(gp)
  80115c:	00ffff04 	movi	r3,-4
  801160:	108000c4 	addi	r2,r2,3
  801164:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  801168:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80116c:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  801170:	1109883a 	add	r4,r2,r4
  801174:	18c00004 	addi	r3,r3,0
  801178:	1900032e 	bgeu	r3,r4,801188 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80117c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  801180:	00bfffc4 	movi	r2,-1
  801184:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  801188:	d1200215 	stw	r4,-32760(gp)
  80118c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  801190:	f800283a 	ret

00801194 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  801194:	deffff04 	addi	sp,sp,-4
  801198:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80119c:	08012740 	call	801274 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8011a0:	00800044 	movi	r2,1
  8011a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8011a8:	dfc00017 	ldw	ra,0(sp)
  8011ac:	dec00104 	addi	sp,sp,4
  8011b0:	f800283a 	ret

008011b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8011b4:	f800283a 	ret

008011b8 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  8011b8:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
  8011bc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
  8011c0:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  8011c4:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  8011c8:	11800b2e 	bgeu	r2,r6,8011f8 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8011cc:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  8011d0:	1a60000c 	andi	r9,r3,32768
  8011d4:	48000326 	beq	r9,zero,8011e4 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8011d8:	10c00005 	stb	r3,0(r2)
  8011dc:	10800044 	addi	r2,r2,1
  8011e0:	003ff906 	br	8011c8 <__alt_data_end+0xff8011c8>
    else if (ptr != buffer)
  8011e4:	11400226 	beq	r2,r5,8011f0 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  8011e8:	1145c83a 	sub	r2,r2,r5
  8011ec:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
  8011f0:	403ff526 	beq	r8,zero,8011c8 <__alt_data_end+0xff8011c8>
  8011f4:	00000106 	br	8011fc <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
  8011f8:	117ffb1e 	bne	r2,r5,8011e8 <__alt_data_end+0xff8011e8>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  8011fc:	39d0000c 	andi	r7,r7,16384
  801200:	3800021e 	bne	r7,zero,80120c <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
  801204:	00bffec4 	movi	r2,-5
  801208:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  80120c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  801210:	f800283a 	ret

00801214 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  801214:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  801218:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  80121c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  801220:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  801224:	2980072e 	bgeu	r5,r6,801244 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  801228:	38c00037 	ldwio	r3,0(r7)
  80122c:	18ffffec 	andhi	r3,r3,65535
  801230:	183ffc26 	beq	r3,zero,801224 <__alt_data_end+0xff801224>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  801234:	28c00007 	ldb	r3,0(r5)
  801238:	20c00035 	stwio	r3,0(r4)
  80123c:	29400044 	addi	r5,r5,1
  801240:	003ff806 	br	801224 <__alt_data_end+0xff801224>

  return count;
}
  801244:	f800283a 	ret

00801248 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  801248:	0005883a 	mov	r2,zero
  80124c:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  801250:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  801254:	10800804 	addi	r2,r2,32
  801258:	10fffd1e 	bne	r2,r3,801250 <__alt_data_end+0xff801250>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80125c:	f800283a 	ret

00801260 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  801260:	3005883a 	mov	r2,r6
  801264:	f800283a 	ret

00801268 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  801268:	01440004 	movi	r5,4096
  80126c:	0009883a 	mov	r4,zero
  801270:	080127c1 	jmpi	80127c <alt_icache_flush>

00801274 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  801274:	000170fa 	wrctl	ienable,zero
  801278:	f800283a 	ret

0080127c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  80127c:	00840004 	movi	r2,4096
  801280:	1140012e 	bgeu	r2,r5,801288 <alt_icache_flush+0xc>
  801284:	100b883a 	mov	r5,r2
  801288:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80128c:	2005883a 	mov	r2,r4
  801290:	1140032e 	bgeu	r2,r5,8012a0 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  801294:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  801298:	10800804 	addi	r2,r2,32
  80129c:	003ffc06 	br	801290 <__alt_data_end+0xff801290>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8012a0:	210007cc 	andi	r4,r4,31
  8012a4:	20000126 	beq	r4,zero,8012ac <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8012a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8012ac:	0000203a 	flushp
  8012b0:	f800283a 	ret
